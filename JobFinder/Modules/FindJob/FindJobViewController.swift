//
//  FindJobViewController.swift
//  JobFinder
//
//  Created Ali Omari on 4/4/19.
//  Copyright © 2019 Ali Omari. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GooglePlacesSearchController

class FindJobViewController: BaseViewController, FindJobViewProtocol {
    
	var presenter: FindJobPresenterProtocol?

    @IBOutlet weak var txtLocation: UITextField!
    @IBOutlet weak var pickerProviders: UIPickerView!
    @IBOutlet weak var btnSearch: UIButton!
    
    var controllerPlacesSearch:GooglePlacesSearchController!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.viewDidLoad()
    }

    func changeSearchButtonState(isEnabled: Bool) {
        btnSearch.isEnabled = isEnabled
        btnSearch.backgroundColor = isEnabled ? .blue : .lightGray
    }
    
    override func setupViews() {
        controllerPlacesSearch = GooglePlacesSearchController(delegate: self,
                                                          apiKey: ApiKey.googlePlacesApiKey,
                                                          placeType: .cities)
        pickerProviders.delegate = self
        pickerProviders.dataSource = self
    }
    
    @IBAction func positionTextDidChanged(_ sender: UITextField) {
        presenter?.jobPositionDidChanged(text: sender.text)
    }
    
    @IBAction func locationDidBeginEditing(_ sender: UITextField) {
        sender.resignFirstResponder()
        present(controllerPlacesSearch, animated: true, completion: nil)
    }
    
    @IBAction func searchAction(_ sender: UIButton) {
        presenter?.searchButtonDidPressed()
    }
}
extension FindJobViewController:GooglePlacesAutocompleteViewControllerDelegate{
    func viewController(didAutocompleteWith place: PlaceDetails) {
        txtLocation.text = place.name
        presenter?.jobLocationDidChanged(lat: place.coordinate?.latitude, lng: place.coordinate?.longitude)
        controllerPlacesSearch.isActive = false
    }
}
extension FindJobViewController:UIPickerViewDataSource,UIPickerViewDelegate{
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return DataManager.shared.providers!.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        let provider = DataManager.shared.providers![row]
        return provider.displayName
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        presenter?.providerDidSelectAtIndex(index: row)
    }
}
